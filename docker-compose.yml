services:
# ===================================================================================================================
# Catalog
# ===================================================================================================================
  postgres:
    image: postgres:13
    # container_name: postgres-catalog
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iceberg
      PGDATA: /catalog/pgdata
    volumes:
      - catalog-db-volume:/catalog
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      retries: 3
    ports:
      - "5433:5432"
    networks:
      - iceberg_net

# ===================================================================================================================
# Trino
# ===================================================================================================================
  trino-coordinator:
    image: 'trinodb/trino:latest'
    # container_name: trino-coordinator
    restart: always
    hostname: trino-coordinator
    ports:
      - '8081:8080'
    volumes:
      - /opt/datalake/trino/coordinator/etc:/etc/trino
    healthcheck:
      test: "curl -f http://localhost:8080/v1/status"
      interval: 15s
      retries: 3
    networks:
      - iceberg_net

  trino-worker-1:
    image: 'trinodb/trino:latest'
    restart: always
    hostname: trino-worker-1
    volumes:
      - /opt/datalake/trino/worker1/etc:/etc/trino
    healthcheck:
      test: "curl -f http://localhost:8080/v1/status"
      interval: 15s
      retries: 3
    networks:
      - iceberg_net

  trino-worker-2:
    image: 'trinodb/trino:latest'
    restart: always
    hostname: trino-worker-2
    volumes:
      - /opt/datalake/trino/worker2/etc:/etc/trino
    healthcheck:
      test: "curl -f http://localhost:8080/v1/status"
      interval: 15s
      retries: 3
    networks:
      - iceberg_net

# ===================================================================================================================
# Minio
# ===================================================================================================================

  # minio:
  #   image: quay.io/minio/minio
  #   # container_name: minio-s3
  #   restart: always
  #   command: server /data --console-address ":9001"
  #   volumes:
  #     - /data/ssd/minio:/data
  #   environment:
  #     - MINIO_ROOT_USER=minioadmin
  #     - MINIO_ROOT_PASSWORD=minioadmin
  #     - MINIO_DOMAIN=minio
  #   ports:
  #     - "9000:9000"  # MinIO S3 API
  #     - "9001:9001"  # MinIO Console
  #   healthcheck:
  #     test: "curl -f http://localhost:9001"
  #     interval: 15s
  #     retries: 3
  #   networks:
  #     iceberg_net:
  #       aliases:
  #         - warehouse.minio

  # mc:
  #   depends_on:
  #     - minio
  #   image: minio/minio:RELEASE.2025-07-23T15-54-02Z
  #   # container_name: mc
  #   networks:
  #     iceberg_net:
  #   environment:
  #     - AWS_ACCESS_KEY_ID=minioadmin
  #     - AWS_SECRET_ACCESS_KEY=minioadmin
  #     - AWS_REGION=us-east-1
  #   entrypoint:
  #     /bin/sh -c "
  #     until (/usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
  #     /usr/bin/mc mb minio/warehouse;
  #     /usr/bin/mc policy set public minio/warehouse;
  #     tail -f /dev/null"

networks:
  iceberg_net:

volumes:
  catalog-db-volume:
